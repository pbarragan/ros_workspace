"""autogenerated by genpy from ee_cart_imped_msgs/EECartImpedAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import geometry_msgs.msg
import genpy
import ee_cart_imped_msgs.msg
import std_msgs.msg

class EECartImpedAction(genpy.Message):
  _md5sum = "363b9ba3af4663dbf9394e1ef0b84435"
  _type = "ee_cart_imped_msgs/EECartImpedAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

EECartImpedActionGoal action_goal
EECartImpedActionResult action_result
EECartImpedActionFeedback action_feedback

================================================================================
MSG: ee_cart_imped_msgs/EECartImpedActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
EECartImpedGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: ee_cart_imped_msgs/EECartImpedGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
Header header
ee_cart_imped_msgs/StiffPoint[] trajectory

================================================================================
MSG: ee_cart_imped_msgs/StiffPoint
Header header
#The pose to achieve in the stiffness directions
geometry_msgs/Pose pose
#Wrench or stiffness for each dimension
geometry_msgs/Wrench wrench_or_stiffness
#The following are True if a force/torque should
#be exerted and False if a stiffness should be used.
bool isForceX
bool isForceY
bool isForceZ
bool isTorqueX
bool isTorqueY
bool isTorqueZ
#The time from the start of the trajectory that this
#point should be achieved.
duration time_from_start
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, seperated into 
# it's linear and angular parts.  
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: ee_cart_imped_msgs/EECartImpedActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
EECartImpedResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: ee_cart_imped_msgs/EECartImpedResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
#whether it was successful
#the pose and force we ended with
Header header
bool success
ee_cart_imped_msgs/StiffPoint desired
geometry_msgs/Pose actual_pose
float64 effort_sq_error

================================================================================
MSG: ee_cart_imped_msgs/EECartImpedActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
EECartImpedFeedback feedback

================================================================================
MSG: ee_cart_imped_msgs/EECartImpedFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
#current pose and squared error in force 
#and the running time of this goal so far
Header header
ee_cart_imped_msgs/StiffPoint[] goal
ee_cart_imped_msgs/StiffPoint initial_point
ee_cart_imped_msgs/StiffPoint desired
ee_cart_imped_msgs/StiffPoint actual_pose
float64 effort_sq_error
float64[] requested_joint_efforts
float64[] actual_joint_efforts
duration running_time



"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['ee_cart_imped_msgs/EECartImpedActionGoal','ee_cart_imped_msgs/EECartImpedActionResult','ee_cart_imped_msgs/EECartImpedActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EECartImpedAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = ee_cart_imped_msgs.msg.EECartImpedActionGoal()
      if self.action_result is None:
        self.action_result = ee_cart_imped_msgs.msg.EECartImpedActionResult()
      if self.action_feedback is None:
        self.action_feedback = ee_cart_imped_msgs.msg.EECartImpedActionFeedback()
    else:
      self.action_goal = ee_cart_imped_msgs.msg.EECartImpedActionGoal()
      self.action_result = ee_cart_imped_msgs.msg.EECartImpedActionResult()
      self.action_feedback = ee_cart_imped_msgs.msg.EECartImpedActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.header.seq, _x.action_goal.goal.header.stamp.secs, _x.action_goal.goal.header.stamp.nsecs))
      _x = self.action_goal.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.trajectory:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.wrench_or_stiffness
        _v7 = _v6.force
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = _v6.torque
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_6B.pack(_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ))
        _v9 = val1.time_from_start
        _x = _v9
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.header.seq, _x.action_result.result.header.stamp.secs, _x.action_result.result.header.stamp.nsecs))
      _x = self.action_result.result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.action_result.result.success, _x.action_result.result.desired.header.seq, _x.action_result.result.desired.header.stamp.secs, _x.action_result.result.desired.header.stamp.nsecs))
      _x = self.action_result.result.desired.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i8d3I.pack(_x.action_result.result.desired.pose.position.x, _x.action_result.result.desired.pose.position.y, _x.action_result.result.desired.pose.position.z, _x.action_result.result.desired.pose.orientation.x, _x.action_result.result.desired.pose.orientation.y, _x.action_result.result.desired.pose.orientation.z, _x.action_result.result.desired.pose.orientation.w, _x.action_result.result.desired.wrench_or_stiffness.force.x, _x.action_result.result.desired.wrench_or_stiffness.force.y, _x.action_result.result.desired.wrench_or_stiffness.force.z, _x.action_result.result.desired.wrench_or_stiffness.torque.x, _x.action_result.result.desired.wrench_or_stiffness.torque.y, _x.action_result.result.desired.wrench_or_stiffness.torque.z, _x.action_result.result.desired.isForceX, _x.action_result.result.desired.isForceY, _x.action_result.result.desired.isForceZ, _x.action_result.result.desired.isTorqueX, _x.action_result.result.desired.isTorqueY, _x.action_result.result.desired.isTorqueZ, _x.action_result.result.desired.time_from_start.secs, _x.action_result.result.desired.time_from_start.nsecs, _x.action_result.result.actual_pose.position.x, _x.action_result.result.actual_pose.position.y, _x.action_result.result.actual_pose.position.z, _x.action_result.result.actual_pose.orientation.x, _x.action_result.result.actual_pose.orientation.y, _x.action_result.result.actual_pose.orientation.z, _x.action_result.result.actual_pose.orientation.w, _x.action_result.result.effort_sq_error, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.header.seq, _x.action_feedback.feedback.header.stamp.secs, _x.action_feedback.feedback.header.stamp.nsecs))
      _x = self.action_feedback.feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_feedback.feedback.goal)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.goal:
        _v10 = val1.header
        buff.write(_struct_I.pack(_v10.seq))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v12 = val1.pose
        _v13 = _v12.position
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v14 = _v12.orientation
        _x = _v14
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v15 = val1.wrench_or_stiffness
        _v16 = _v15.force
        _x = _v16
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v17 = _v15.torque
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_6B.pack(_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ))
        _v18 = val1.time_from_start
        _x = _v18
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.initial_point.header.seq, _x.action_feedback.feedback.initial_point.header.stamp.secs, _x.action_feedback.feedback.initial_point.header.stamp.nsecs))
      _x = self.action_feedback.feedback.initial_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i3I.pack(_x.action_feedback.feedback.initial_point.pose.position.x, _x.action_feedback.feedback.initial_point.pose.position.y, _x.action_feedback.feedback.initial_point.pose.position.z, _x.action_feedback.feedback.initial_point.pose.orientation.x, _x.action_feedback.feedback.initial_point.pose.orientation.y, _x.action_feedback.feedback.initial_point.pose.orientation.z, _x.action_feedback.feedback.initial_point.pose.orientation.w, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.x, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.y, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.z, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.initial_point.isForceX, _x.action_feedback.feedback.initial_point.isForceY, _x.action_feedback.feedback.initial_point.isForceZ, _x.action_feedback.feedback.initial_point.isTorqueX, _x.action_feedback.feedback.initial_point.isTorqueY, _x.action_feedback.feedback.initial_point.isTorqueZ, _x.action_feedback.feedback.initial_point.time_from_start.secs, _x.action_feedback.feedback.initial_point.time_from_start.nsecs, _x.action_feedback.feedback.desired.header.seq, _x.action_feedback.feedback.desired.header.stamp.secs, _x.action_feedback.feedback.desired.header.stamp.nsecs))
      _x = self.action_feedback.feedback.desired.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i3I.pack(_x.action_feedback.feedback.desired.pose.position.x, _x.action_feedback.feedback.desired.pose.position.y, _x.action_feedback.feedback.desired.pose.position.z, _x.action_feedback.feedback.desired.pose.orientation.x, _x.action_feedback.feedback.desired.pose.orientation.y, _x.action_feedback.feedback.desired.pose.orientation.z, _x.action_feedback.feedback.desired.pose.orientation.w, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.x, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.y, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.z, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.desired.isForceX, _x.action_feedback.feedback.desired.isForceY, _x.action_feedback.feedback.desired.isForceZ, _x.action_feedback.feedback.desired.isTorqueX, _x.action_feedback.feedback.desired.isTorqueY, _x.action_feedback.feedback.desired.isTorqueZ, _x.action_feedback.feedback.desired.time_from_start.secs, _x.action_feedback.feedback.desired.time_from_start.nsecs, _x.action_feedback.feedback.actual_pose.header.seq, _x.action_feedback.feedback.actual_pose.header.stamp.secs, _x.action_feedback.feedback.actual_pose.header.stamp.nsecs))
      _x = self.action_feedback.feedback.actual_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2id.pack(_x.action_feedback.feedback.actual_pose.pose.position.x, _x.action_feedback.feedback.actual_pose.pose.position.y, _x.action_feedback.feedback.actual_pose.pose.position.z, _x.action_feedback.feedback.actual_pose.pose.orientation.x, _x.action_feedback.feedback.actual_pose.pose.orientation.y, _x.action_feedback.feedback.actual_pose.pose.orientation.z, _x.action_feedback.feedback.actual_pose.pose.orientation.w, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.x, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.y, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.z, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.actual_pose.isForceX, _x.action_feedback.feedback.actual_pose.isForceY, _x.action_feedback.feedback.actual_pose.isForceZ, _x.action_feedback.feedback.actual_pose.isTorqueX, _x.action_feedback.feedback.actual_pose.isTorqueY, _x.action_feedback.feedback.actual_pose.isTorqueZ, _x.action_feedback.feedback.actual_pose.time_from_start.secs, _x.action_feedback.feedback.actual_pose.time_from_start.nsecs, _x.action_feedback.feedback.effort_sq_error))
      length = len(self.action_feedback.feedback.requested_joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_feedback.feedback.requested_joint_efforts))
      length = len(self.action_feedback.feedback.actual_joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_feedback.feedback.actual_joint_efforts))
      _x = self
      buff.write(_struct_2i.pack(_x.action_feedback.feedback.running_time.secs, _x.action_feedback.feedback.running_time.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = ee_cart_imped_msgs.msg.EECartImpedActionGoal()
      if self.action_result is None:
        self.action_result = ee_cart_imped_msgs.msg.EECartImpedActionResult()
      if self.action_feedback is None:
        self.action_feedback = ee_cart_imped_msgs.msg.EECartImpedActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.header.seq, _x.action_goal.goal.header.stamp.secs, _x.action_goal.goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.trajectory = []
      for i in range(0, length):
        val1 = ee_cart_imped_msgs.msg.StiffPoint()
        _v19 = val1.header
        start = end
        end += 4
        (_v19.seq,) = _struct_I.unpack(str[start:end])
        _v20 = _v19.stamp
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v19.frame_id = str[start:end].decode('utf-8')
        else:
          _v19.frame_id = str[start:end]
        _v21 = val1.pose
        _v22 = _v21.position
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v23 = _v21.orientation
        _x = _v23
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v24 = val1.wrench_or_stiffness
        _v25 = _v24.force
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v26 = _v24.torque
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ,) = _struct_6B.unpack(str[start:end])
        val1.isForceX = bool(val1.isForceX)
        val1.isForceY = bool(val1.isForceY)
        val1.isForceZ = bool(val1.isForceZ)
        val1.isTorqueX = bool(val1.isTorqueX)
        val1.isTorqueY = bool(val1.isTorqueY)
        val1.isTorqueZ = bool(val1.isTorqueZ)
        _v27 = val1.time_from_start
        _x = _v27
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.action_goal.goal.trajectory.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.header.seq, _x.action_result.result.header.stamp.secs, _x.action_result.result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.success, _x.action_result.result.desired.header.seq, _x.action_result.result.desired.header.stamp.secs, _x.action_result.result.desired.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.desired.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.desired.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 194
      (_x.action_result.result.desired.pose.position.x, _x.action_result.result.desired.pose.position.y, _x.action_result.result.desired.pose.position.z, _x.action_result.result.desired.pose.orientation.x, _x.action_result.result.desired.pose.orientation.y, _x.action_result.result.desired.pose.orientation.z, _x.action_result.result.desired.pose.orientation.w, _x.action_result.result.desired.wrench_or_stiffness.force.x, _x.action_result.result.desired.wrench_or_stiffness.force.y, _x.action_result.result.desired.wrench_or_stiffness.force.z, _x.action_result.result.desired.wrench_or_stiffness.torque.x, _x.action_result.result.desired.wrench_or_stiffness.torque.y, _x.action_result.result.desired.wrench_or_stiffness.torque.z, _x.action_result.result.desired.isForceX, _x.action_result.result.desired.isForceY, _x.action_result.result.desired.isForceZ, _x.action_result.result.desired.isTorqueX, _x.action_result.result.desired.isTorqueY, _x.action_result.result.desired.isTorqueZ, _x.action_result.result.desired.time_from_start.secs, _x.action_result.result.desired.time_from_start.nsecs, _x.action_result.result.actual_pose.position.x, _x.action_result.result.actual_pose.position.y, _x.action_result.result.actual_pose.position.z, _x.action_result.result.actual_pose.orientation.x, _x.action_result.result.actual_pose.orientation.y, _x.action_result.result.actual_pose.orientation.z, _x.action_result.result.actual_pose.orientation.w, _x.action_result.result.effort_sq_error, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_13d6B2i8d3I.unpack(str[start:end])
      self.action_result.result.desired.isForceX = bool(self.action_result.result.desired.isForceX)
      self.action_result.result.desired.isForceY = bool(self.action_result.result.desired.isForceY)
      self.action_result.result.desired.isForceZ = bool(self.action_result.result.desired.isForceZ)
      self.action_result.result.desired.isTorqueX = bool(self.action_result.result.desired.isTorqueX)
      self.action_result.result.desired.isTorqueY = bool(self.action_result.result.desired.isTorqueY)
      self.action_result.result.desired.isTorqueZ = bool(self.action_result.result.desired.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.header.seq, _x.action_feedback.feedback.header.stamp.secs, _x.action_feedback.feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.goal = []
      for i in range(0, length):
        val1 = ee_cart_imped_msgs.msg.StiffPoint()
        _v28 = val1.header
        start = end
        end += 4
        (_v28.seq,) = _struct_I.unpack(str[start:end])
        _v29 = _v28.stamp
        _x = _v29
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.frame_id = str[start:end].decode('utf-8')
        else:
          _v28.frame_id = str[start:end]
        _v30 = val1.pose
        _v31 = _v30.position
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v32 = _v30.orientation
        _x = _v32
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v33 = val1.wrench_or_stiffness
        _v34 = _v33.force
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v35 = _v33.torque
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ,) = _struct_6B.unpack(str[start:end])
        val1.isForceX = bool(val1.isForceX)
        val1.isForceY = bool(val1.isForceY)
        val1.isForceZ = bool(val1.isForceZ)
        val1.isTorqueX = bool(val1.isTorqueX)
        val1.isTorqueY = bool(val1.isTorqueY)
        val1.isTorqueZ = bool(val1.isTorqueZ)
        _v36 = val1.time_from_start
        _x = _v36
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.action_feedback.feedback.goal.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.initial_point.header.seq, _x.action_feedback.feedback.initial_point.header.stamp.secs, _x.action_feedback.feedback.initial_point.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.initial_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.initial_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.action_feedback.feedback.initial_point.pose.position.x, _x.action_feedback.feedback.initial_point.pose.position.y, _x.action_feedback.feedback.initial_point.pose.position.z, _x.action_feedback.feedback.initial_point.pose.orientation.x, _x.action_feedback.feedback.initial_point.pose.orientation.y, _x.action_feedback.feedback.initial_point.pose.orientation.z, _x.action_feedback.feedback.initial_point.pose.orientation.w, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.x, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.y, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.z, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.initial_point.isForceX, _x.action_feedback.feedback.initial_point.isForceY, _x.action_feedback.feedback.initial_point.isForceZ, _x.action_feedback.feedback.initial_point.isTorqueX, _x.action_feedback.feedback.initial_point.isTorqueY, _x.action_feedback.feedback.initial_point.isTorqueZ, _x.action_feedback.feedback.initial_point.time_from_start.secs, _x.action_feedback.feedback.initial_point.time_from_start.nsecs, _x.action_feedback.feedback.desired.header.seq, _x.action_feedback.feedback.desired.header.stamp.secs, _x.action_feedback.feedback.desired.header.stamp.nsecs,) = _struct_13d6B2i3I.unpack(str[start:end])
      self.action_feedback.feedback.initial_point.isForceX = bool(self.action_feedback.feedback.initial_point.isForceX)
      self.action_feedback.feedback.initial_point.isForceY = bool(self.action_feedback.feedback.initial_point.isForceY)
      self.action_feedback.feedback.initial_point.isForceZ = bool(self.action_feedback.feedback.initial_point.isForceZ)
      self.action_feedback.feedback.initial_point.isTorqueX = bool(self.action_feedback.feedback.initial_point.isTorqueX)
      self.action_feedback.feedback.initial_point.isTorqueY = bool(self.action_feedback.feedback.initial_point.isTorqueY)
      self.action_feedback.feedback.initial_point.isTorqueZ = bool(self.action_feedback.feedback.initial_point.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.desired.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.desired.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.action_feedback.feedback.desired.pose.position.x, _x.action_feedback.feedback.desired.pose.position.y, _x.action_feedback.feedback.desired.pose.position.z, _x.action_feedback.feedback.desired.pose.orientation.x, _x.action_feedback.feedback.desired.pose.orientation.y, _x.action_feedback.feedback.desired.pose.orientation.z, _x.action_feedback.feedback.desired.pose.orientation.w, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.x, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.y, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.z, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.desired.isForceX, _x.action_feedback.feedback.desired.isForceY, _x.action_feedback.feedback.desired.isForceZ, _x.action_feedback.feedback.desired.isTorqueX, _x.action_feedback.feedback.desired.isTorqueY, _x.action_feedback.feedback.desired.isTorqueZ, _x.action_feedback.feedback.desired.time_from_start.secs, _x.action_feedback.feedback.desired.time_from_start.nsecs, _x.action_feedback.feedback.actual_pose.header.seq, _x.action_feedback.feedback.actual_pose.header.stamp.secs, _x.action_feedback.feedback.actual_pose.header.stamp.nsecs,) = _struct_13d6B2i3I.unpack(str[start:end])
      self.action_feedback.feedback.desired.isForceX = bool(self.action_feedback.feedback.desired.isForceX)
      self.action_feedback.feedback.desired.isForceY = bool(self.action_feedback.feedback.desired.isForceY)
      self.action_feedback.feedback.desired.isForceZ = bool(self.action_feedback.feedback.desired.isForceZ)
      self.action_feedback.feedback.desired.isTorqueX = bool(self.action_feedback.feedback.desired.isTorqueX)
      self.action_feedback.feedback.desired.isTorqueY = bool(self.action_feedback.feedback.desired.isTorqueY)
      self.action_feedback.feedback.desired.isTorqueZ = bool(self.action_feedback.feedback.desired.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.actual_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.actual_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 126
      (_x.action_feedback.feedback.actual_pose.pose.position.x, _x.action_feedback.feedback.actual_pose.pose.position.y, _x.action_feedback.feedback.actual_pose.pose.position.z, _x.action_feedback.feedback.actual_pose.pose.orientation.x, _x.action_feedback.feedback.actual_pose.pose.orientation.y, _x.action_feedback.feedback.actual_pose.pose.orientation.z, _x.action_feedback.feedback.actual_pose.pose.orientation.w, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.x, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.y, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.z, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.actual_pose.isForceX, _x.action_feedback.feedback.actual_pose.isForceY, _x.action_feedback.feedback.actual_pose.isForceZ, _x.action_feedback.feedback.actual_pose.isTorqueX, _x.action_feedback.feedback.actual_pose.isTorqueY, _x.action_feedback.feedback.actual_pose.isTorqueZ, _x.action_feedback.feedback.actual_pose.time_from_start.secs, _x.action_feedback.feedback.actual_pose.time_from_start.nsecs, _x.action_feedback.feedback.effort_sq_error,) = _struct_13d6B2id.unpack(str[start:end])
      self.action_feedback.feedback.actual_pose.isForceX = bool(self.action_feedback.feedback.actual_pose.isForceX)
      self.action_feedback.feedback.actual_pose.isForceY = bool(self.action_feedback.feedback.actual_pose.isForceY)
      self.action_feedback.feedback.actual_pose.isForceZ = bool(self.action_feedback.feedback.actual_pose.isForceZ)
      self.action_feedback.feedback.actual_pose.isTorqueX = bool(self.action_feedback.feedback.actual_pose.isTorqueX)
      self.action_feedback.feedback.actual_pose.isTorqueY = bool(self.action_feedback.feedback.actual_pose.isTorqueY)
      self.action_feedback.feedback.actual_pose.isTorqueZ = bool(self.action_feedback.feedback.actual_pose.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_feedback.feedback.requested_joint_efforts = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_feedback.feedback.actual_joint_efforts = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.action_feedback.feedback.running_time.secs, _x.action_feedback.feedback.running_time.nsecs,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.header.seq, _x.action_goal.goal.header.stamp.secs, _x.action_goal.goal.header.stamp.nsecs))
      _x = self.action_goal.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.trajectory:
        _v37 = val1.header
        buff.write(_struct_I.pack(_v37.seq))
        _v38 = _v37.stamp
        _x = _v38
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v37.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v39 = val1.pose
        _v40 = _v39.position
        _x = _v40
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v41 = _v39.orientation
        _x = _v41
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v42 = val1.wrench_or_stiffness
        _v43 = _v42.force
        _x = _v43
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v44 = _v42.torque
        _x = _v44
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_6B.pack(_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ))
        _v45 = val1.time_from_start
        _x = _v45
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.header.seq, _x.action_result.result.header.stamp.secs, _x.action_result.result.header.stamp.nsecs))
      _x = self.action_result.result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.action_result.result.success, _x.action_result.result.desired.header.seq, _x.action_result.result.desired.header.stamp.secs, _x.action_result.result.desired.header.stamp.nsecs))
      _x = self.action_result.result.desired.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i8d3I.pack(_x.action_result.result.desired.pose.position.x, _x.action_result.result.desired.pose.position.y, _x.action_result.result.desired.pose.position.z, _x.action_result.result.desired.pose.orientation.x, _x.action_result.result.desired.pose.orientation.y, _x.action_result.result.desired.pose.orientation.z, _x.action_result.result.desired.pose.orientation.w, _x.action_result.result.desired.wrench_or_stiffness.force.x, _x.action_result.result.desired.wrench_or_stiffness.force.y, _x.action_result.result.desired.wrench_or_stiffness.force.z, _x.action_result.result.desired.wrench_or_stiffness.torque.x, _x.action_result.result.desired.wrench_or_stiffness.torque.y, _x.action_result.result.desired.wrench_or_stiffness.torque.z, _x.action_result.result.desired.isForceX, _x.action_result.result.desired.isForceY, _x.action_result.result.desired.isForceZ, _x.action_result.result.desired.isTorqueX, _x.action_result.result.desired.isTorqueY, _x.action_result.result.desired.isTorqueZ, _x.action_result.result.desired.time_from_start.secs, _x.action_result.result.desired.time_from_start.nsecs, _x.action_result.result.actual_pose.position.x, _x.action_result.result.actual_pose.position.y, _x.action_result.result.actual_pose.position.z, _x.action_result.result.actual_pose.orientation.x, _x.action_result.result.actual_pose.orientation.y, _x.action_result.result.actual_pose.orientation.z, _x.action_result.result.actual_pose.orientation.w, _x.action_result.result.effort_sq_error, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.header.seq, _x.action_feedback.feedback.header.stamp.secs, _x.action_feedback.feedback.header.stamp.nsecs))
      _x = self.action_feedback.feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_feedback.feedback.goal)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.goal:
        _v46 = val1.header
        buff.write(_struct_I.pack(_v46.seq))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v48 = val1.pose
        _v49 = _v48.position
        _x = _v49
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v50 = _v48.orientation
        _x = _v50
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v51 = val1.wrench_or_stiffness
        _v52 = _v51.force
        _x = _v52
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v53 = _v51.torque
        _x = _v53
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_6B.pack(_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ))
        _v54 = val1.time_from_start
        _x = _v54
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.initial_point.header.seq, _x.action_feedback.feedback.initial_point.header.stamp.secs, _x.action_feedback.feedback.initial_point.header.stamp.nsecs))
      _x = self.action_feedback.feedback.initial_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i3I.pack(_x.action_feedback.feedback.initial_point.pose.position.x, _x.action_feedback.feedback.initial_point.pose.position.y, _x.action_feedback.feedback.initial_point.pose.position.z, _x.action_feedback.feedback.initial_point.pose.orientation.x, _x.action_feedback.feedback.initial_point.pose.orientation.y, _x.action_feedback.feedback.initial_point.pose.orientation.z, _x.action_feedback.feedback.initial_point.pose.orientation.w, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.x, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.y, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.z, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.initial_point.isForceX, _x.action_feedback.feedback.initial_point.isForceY, _x.action_feedback.feedback.initial_point.isForceZ, _x.action_feedback.feedback.initial_point.isTorqueX, _x.action_feedback.feedback.initial_point.isTorqueY, _x.action_feedback.feedback.initial_point.isTorqueZ, _x.action_feedback.feedback.initial_point.time_from_start.secs, _x.action_feedback.feedback.initial_point.time_from_start.nsecs, _x.action_feedback.feedback.desired.header.seq, _x.action_feedback.feedback.desired.header.stamp.secs, _x.action_feedback.feedback.desired.header.stamp.nsecs))
      _x = self.action_feedback.feedback.desired.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i3I.pack(_x.action_feedback.feedback.desired.pose.position.x, _x.action_feedback.feedback.desired.pose.position.y, _x.action_feedback.feedback.desired.pose.position.z, _x.action_feedback.feedback.desired.pose.orientation.x, _x.action_feedback.feedback.desired.pose.orientation.y, _x.action_feedback.feedback.desired.pose.orientation.z, _x.action_feedback.feedback.desired.pose.orientation.w, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.x, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.y, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.z, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.desired.isForceX, _x.action_feedback.feedback.desired.isForceY, _x.action_feedback.feedback.desired.isForceZ, _x.action_feedback.feedback.desired.isTorqueX, _x.action_feedback.feedback.desired.isTorqueY, _x.action_feedback.feedback.desired.isTorqueZ, _x.action_feedback.feedback.desired.time_from_start.secs, _x.action_feedback.feedback.desired.time_from_start.nsecs, _x.action_feedback.feedback.actual_pose.header.seq, _x.action_feedback.feedback.actual_pose.header.stamp.secs, _x.action_feedback.feedback.actual_pose.header.stamp.nsecs))
      _x = self.action_feedback.feedback.actual_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2id.pack(_x.action_feedback.feedback.actual_pose.pose.position.x, _x.action_feedback.feedback.actual_pose.pose.position.y, _x.action_feedback.feedback.actual_pose.pose.position.z, _x.action_feedback.feedback.actual_pose.pose.orientation.x, _x.action_feedback.feedback.actual_pose.pose.orientation.y, _x.action_feedback.feedback.actual_pose.pose.orientation.z, _x.action_feedback.feedback.actual_pose.pose.orientation.w, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.x, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.y, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.z, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.actual_pose.isForceX, _x.action_feedback.feedback.actual_pose.isForceY, _x.action_feedback.feedback.actual_pose.isForceZ, _x.action_feedback.feedback.actual_pose.isTorqueX, _x.action_feedback.feedback.actual_pose.isTorqueY, _x.action_feedback.feedback.actual_pose.isTorqueZ, _x.action_feedback.feedback.actual_pose.time_from_start.secs, _x.action_feedback.feedback.actual_pose.time_from_start.nsecs, _x.action_feedback.feedback.effort_sq_error))
      length = len(self.action_feedback.feedback.requested_joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_feedback.feedback.requested_joint_efforts.tostring())
      length = len(self.action_feedback.feedback.actual_joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_feedback.feedback.actual_joint_efforts.tostring())
      _x = self
      buff.write(_struct_2i.pack(_x.action_feedback.feedback.running_time.secs, _x.action_feedback.feedback.running_time.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = ee_cart_imped_msgs.msg.EECartImpedActionGoal()
      if self.action_result is None:
        self.action_result = ee_cart_imped_msgs.msg.EECartImpedActionResult()
      if self.action_feedback is None:
        self.action_feedback = ee_cart_imped_msgs.msg.EECartImpedActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.header.seq, _x.action_goal.goal.header.stamp.secs, _x.action_goal.goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.trajectory = []
      for i in range(0, length):
        val1 = ee_cart_imped_msgs.msg.StiffPoint()
        _v55 = val1.header
        start = end
        end += 4
        (_v55.seq,) = _struct_I.unpack(str[start:end])
        _v56 = _v55.stamp
        _x = _v56
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v55.frame_id = str[start:end].decode('utf-8')
        else:
          _v55.frame_id = str[start:end]
        _v57 = val1.pose
        _v58 = _v57.position
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v59 = _v57.orientation
        _x = _v59
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v60 = val1.wrench_or_stiffness
        _v61 = _v60.force
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v62 = _v60.torque
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ,) = _struct_6B.unpack(str[start:end])
        val1.isForceX = bool(val1.isForceX)
        val1.isForceY = bool(val1.isForceY)
        val1.isForceZ = bool(val1.isForceZ)
        val1.isTorqueX = bool(val1.isTorqueX)
        val1.isTorqueY = bool(val1.isTorqueY)
        val1.isTorqueZ = bool(val1.isTorqueZ)
        _v63 = val1.time_from_start
        _x = _v63
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.action_goal.goal.trajectory.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.header.seq, _x.action_result.result.header.stamp.secs, _x.action_result.result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.success, _x.action_result.result.desired.header.seq, _x.action_result.result.desired.header.stamp.secs, _x.action_result.result.desired.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.desired.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.desired.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 194
      (_x.action_result.result.desired.pose.position.x, _x.action_result.result.desired.pose.position.y, _x.action_result.result.desired.pose.position.z, _x.action_result.result.desired.pose.orientation.x, _x.action_result.result.desired.pose.orientation.y, _x.action_result.result.desired.pose.orientation.z, _x.action_result.result.desired.pose.orientation.w, _x.action_result.result.desired.wrench_or_stiffness.force.x, _x.action_result.result.desired.wrench_or_stiffness.force.y, _x.action_result.result.desired.wrench_or_stiffness.force.z, _x.action_result.result.desired.wrench_or_stiffness.torque.x, _x.action_result.result.desired.wrench_or_stiffness.torque.y, _x.action_result.result.desired.wrench_or_stiffness.torque.z, _x.action_result.result.desired.isForceX, _x.action_result.result.desired.isForceY, _x.action_result.result.desired.isForceZ, _x.action_result.result.desired.isTorqueX, _x.action_result.result.desired.isTorqueY, _x.action_result.result.desired.isTorqueZ, _x.action_result.result.desired.time_from_start.secs, _x.action_result.result.desired.time_from_start.nsecs, _x.action_result.result.actual_pose.position.x, _x.action_result.result.actual_pose.position.y, _x.action_result.result.actual_pose.position.z, _x.action_result.result.actual_pose.orientation.x, _x.action_result.result.actual_pose.orientation.y, _x.action_result.result.actual_pose.orientation.z, _x.action_result.result.actual_pose.orientation.w, _x.action_result.result.effort_sq_error, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_13d6B2i8d3I.unpack(str[start:end])
      self.action_result.result.desired.isForceX = bool(self.action_result.result.desired.isForceX)
      self.action_result.result.desired.isForceY = bool(self.action_result.result.desired.isForceY)
      self.action_result.result.desired.isForceZ = bool(self.action_result.result.desired.isForceZ)
      self.action_result.result.desired.isTorqueX = bool(self.action_result.result.desired.isTorqueX)
      self.action_result.result.desired.isTorqueY = bool(self.action_result.result.desired.isTorqueY)
      self.action_result.result.desired.isTorqueZ = bool(self.action_result.result.desired.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.header.seq, _x.action_feedback.feedback.header.stamp.secs, _x.action_feedback.feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.goal = []
      for i in range(0, length):
        val1 = ee_cart_imped_msgs.msg.StiffPoint()
        _v64 = val1.header
        start = end
        end += 4
        (_v64.seq,) = _struct_I.unpack(str[start:end])
        _v65 = _v64.stamp
        _x = _v65
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v64.frame_id = str[start:end].decode('utf-8')
        else:
          _v64.frame_id = str[start:end]
        _v66 = val1.pose
        _v67 = _v66.position
        _x = _v67
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v68 = _v66.orientation
        _x = _v68
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v69 = val1.wrench_or_stiffness
        _v70 = _v69.force
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v71 = _v69.torque
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ,) = _struct_6B.unpack(str[start:end])
        val1.isForceX = bool(val1.isForceX)
        val1.isForceY = bool(val1.isForceY)
        val1.isForceZ = bool(val1.isForceZ)
        val1.isTorqueX = bool(val1.isTorqueX)
        val1.isTorqueY = bool(val1.isTorqueY)
        val1.isTorqueZ = bool(val1.isTorqueZ)
        _v72 = val1.time_from_start
        _x = _v72
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.action_feedback.feedback.goal.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.initial_point.header.seq, _x.action_feedback.feedback.initial_point.header.stamp.secs, _x.action_feedback.feedback.initial_point.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.initial_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.initial_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.action_feedback.feedback.initial_point.pose.position.x, _x.action_feedback.feedback.initial_point.pose.position.y, _x.action_feedback.feedback.initial_point.pose.position.z, _x.action_feedback.feedback.initial_point.pose.orientation.x, _x.action_feedback.feedback.initial_point.pose.orientation.y, _x.action_feedback.feedback.initial_point.pose.orientation.z, _x.action_feedback.feedback.initial_point.pose.orientation.w, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.x, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.y, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.force.z, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.initial_point.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.initial_point.isForceX, _x.action_feedback.feedback.initial_point.isForceY, _x.action_feedback.feedback.initial_point.isForceZ, _x.action_feedback.feedback.initial_point.isTorqueX, _x.action_feedback.feedback.initial_point.isTorqueY, _x.action_feedback.feedback.initial_point.isTorqueZ, _x.action_feedback.feedback.initial_point.time_from_start.secs, _x.action_feedback.feedback.initial_point.time_from_start.nsecs, _x.action_feedback.feedback.desired.header.seq, _x.action_feedback.feedback.desired.header.stamp.secs, _x.action_feedback.feedback.desired.header.stamp.nsecs,) = _struct_13d6B2i3I.unpack(str[start:end])
      self.action_feedback.feedback.initial_point.isForceX = bool(self.action_feedback.feedback.initial_point.isForceX)
      self.action_feedback.feedback.initial_point.isForceY = bool(self.action_feedback.feedback.initial_point.isForceY)
      self.action_feedback.feedback.initial_point.isForceZ = bool(self.action_feedback.feedback.initial_point.isForceZ)
      self.action_feedback.feedback.initial_point.isTorqueX = bool(self.action_feedback.feedback.initial_point.isTorqueX)
      self.action_feedback.feedback.initial_point.isTorqueY = bool(self.action_feedback.feedback.initial_point.isTorqueY)
      self.action_feedback.feedback.initial_point.isTorqueZ = bool(self.action_feedback.feedback.initial_point.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.desired.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.desired.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.action_feedback.feedback.desired.pose.position.x, _x.action_feedback.feedback.desired.pose.position.y, _x.action_feedback.feedback.desired.pose.position.z, _x.action_feedback.feedback.desired.pose.orientation.x, _x.action_feedback.feedback.desired.pose.orientation.y, _x.action_feedback.feedback.desired.pose.orientation.z, _x.action_feedback.feedback.desired.pose.orientation.w, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.x, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.y, _x.action_feedback.feedback.desired.wrench_or_stiffness.force.z, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.desired.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.desired.isForceX, _x.action_feedback.feedback.desired.isForceY, _x.action_feedback.feedback.desired.isForceZ, _x.action_feedback.feedback.desired.isTorqueX, _x.action_feedback.feedback.desired.isTorqueY, _x.action_feedback.feedback.desired.isTorqueZ, _x.action_feedback.feedback.desired.time_from_start.secs, _x.action_feedback.feedback.desired.time_from_start.nsecs, _x.action_feedback.feedback.actual_pose.header.seq, _x.action_feedback.feedback.actual_pose.header.stamp.secs, _x.action_feedback.feedback.actual_pose.header.stamp.nsecs,) = _struct_13d6B2i3I.unpack(str[start:end])
      self.action_feedback.feedback.desired.isForceX = bool(self.action_feedback.feedback.desired.isForceX)
      self.action_feedback.feedback.desired.isForceY = bool(self.action_feedback.feedback.desired.isForceY)
      self.action_feedback.feedback.desired.isForceZ = bool(self.action_feedback.feedback.desired.isForceZ)
      self.action_feedback.feedback.desired.isTorqueX = bool(self.action_feedback.feedback.desired.isTorqueX)
      self.action_feedback.feedback.desired.isTorqueY = bool(self.action_feedback.feedback.desired.isTorqueY)
      self.action_feedback.feedback.desired.isTorqueZ = bool(self.action_feedback.feedback.desired.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.actual_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.actual_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 126
      (_x.action_feedback.feedback.actual_pose.pose.position.x, _x.action_feedback.feedback.actual_pose.pose.position.y, _x.action_feedback.feedback.actual_pose.pose.position.z, _x.action_feedback.feedback.actual_pose.pose.orientation.x, _x.action_feedback.feedback.actual_pose.pose.orientation.y, _x.action_feedback.feedback.actual_pose.pose.orientation.z, _x.action_feedback.feedback.actual_pose.pose.orientation.w, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.x, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.y, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.force.z, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.x, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.y, _x.action_feedback.feedback.actual_pose.wrench_or_stiffness.torque.z, _x.action_feedback.feedback.actual_pose.isForceX, _x.action_feedback.feedback.actual_pose.isForceY, _x.action_feedback.feedback.actual_pose.isForceZ, _x.action_feedback.feedback.actual_pose.isTorqueX, _x.action_feedback.feedback.actual_pose.isTorqueY, _x.action_feedback.feedback.actual_pose.isTorqueZ, _x.action_feedback.feedback.actual_pose.time_from_start.secs, _x.action_feedback.feedback.actual_pose.time_from_start.nsecs, _x.action_feedback.feedback.effort_sq_error,) = _struct_13d6B2id.unpack(str[start:end])
      self.action_feedback.feedback.actual_pose.isForceX = bool(self.action_feedback.feedback.actual_pose.isForceX)
      self.action_feedback.feedback.actual_pose.isForceY = bool(self.action_feedback.feedback.actual_pose.isForceY)
      self.action_feedback.feedback.actual_pose.isForceZ = bool(self.action_feedback.feedback.actual_pose.isForceZ)
      self.action_feedback.feedback.actual_pose.isTorqueX = bool(self.action_feedback.feedback.actual_pose.isTorqueX)
      self.action_feedback.feedback.actual_pose.isTorqueY = bool(self.action_feedback.feedback.actual_pose.isTorqueY)
      self.action_feedback.feedback.actual_pose.isTorqueZ = bool(self.action_feedback.feedback.actual_pose.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_feedback.feedback.requested_joint_efforts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_feedback.feedback.actual_joint_efforts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.action_feedback.feedback.running_time.secs, _x.action_feedback.feedback.running_time.nsecs,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6B = struct.Struct("<6B")
_struct_B = struct.Struct("<B")
_struct_13d6B2id = struct.Struct("<13d6B2id")
_struct_2i = struct.Struct("<2i")
_struct_3I = struct.Struct("<3I")
_struct_B3I = struct.Struct("<B3I")
_struct_13d6B2i3I = struct.Struct("<13d6B2i3I")
_struct_13d6B2i8d3I = struct.Struct("<13d6B2i8d3I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
