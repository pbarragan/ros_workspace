"""autogenerated by genpy from ee_cart_imped_msgs/EECartImpedFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import ee_cart_imped_msgs.msg
import std_msgs.msg

class EECartImpedFeedback(genpy.Message):
  _md5sum = "4106b02683301dac2003809bdf610591"
  _type = "ee_cart_imped_msgs/EECartImpedFeedback"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
#current pose and squared error in force 
#and the running time of this goal so far
Header header
ee_cart_imped_msgs/StiffPoint[] goal
ee_cart_imped_msgs/StiffPoint initial_point
ee_cart_imped_msgs/StiffPoint desired
ee_cart_imped_msgs/StiffPoint actual_pose
float64 effort_sq_error
float64[] requested_joint_efforts
float64[] actual_joint_efforts
duration running_time



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ee_cart_imped_msgs/StiffPoint
Header header
#The pose to achieve in the stiffness directions
geometry_msgs/Pose pose
#Wrench or stiffness for each dimension
geometry_msgs/Wrench wrench_or_stiffness
#The following are True if a force/torque should
#be exerted and False if a stiffness should be used.
bool isForceX
bool isForceY
bool isForceZ
bool isTorqueX
bool isTorqueY
bool isTorqueZ
#The time from the start of the trajectory that this
#point should be achieved.
duration time_from_start
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, seperated into 
# it's linear and angular parts.  
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','goal','initial_point','desired','actual_pose','effort_sq_error','requested_joint_efforts','actual_joint_efforts','running_time']
  _slot_types = ['std_msgs/Header','ee_cart_imped_msgs/StiffPoint[]','ee_cart_imped_msgs/StiffPoint','ee_cart_imped_msgs/StiffPoint','ee_cart_imped_msgs/StiffPoint','float64','float64[]','float64[]','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal,initial_point,desired,actual_pose,effort_sq_error,requested_joint_efforts,actual_joint_efforts,running_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EECartImpedFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = []
      if self.initial_point is None:
        self.initial_point = ee_cart_imped_msgs.msg.StiffPoint()
      if self.desired is None:
        self.desired = ee_cart_imped_msgs.msg.StiffPoint()
      if self.actual_pose is None:
        self.actual_pose = ee_cart_imped_msgs.msg.StiffPoint()
      if self.effort_sq_error is None:
        self.effort_sq_error = 0.
      if self.requested_joint_efforts is None:
        self.requested_joint_efforts = []
      if self.actual_joint_efforts is None:
        self.actual_joint_efforts = []
      if self.running_time is None:
        self.running_time = genpy.Duration()
    else:
      self.header = std_msgs.msg.Header()
      self.goal = []
      self.initial_point = ee_cart_imped_msgs.msg.StiffPoint()
      self.desired = ee_cart_imped_msgs.msg.StiffPoint()
      self.actual_pose = ee_cart_imped_msgs.msg.StiffPoint()
      self.effort_sq_error = 0.
      self.requested_joint_efforts = []
      self.actual_joint_efforts = []
      self.running_time = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.wrench_or_stiffness
        _v7 = _v6.force
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = _v6.torque
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_6B.pack(_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ))
        _v9 = val1.time_from_start
        _x = _v9
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.initial_point.header.seq, _x.initial_point.header.stamp.secs, _x.initial_point.header.stamp.nsecs))
      _x = self.initial_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i3I.pack(_x.initial_point.pose.position.x, _x.initial_point.pose.position.y, _x.initial_point.pose.position.z, _x.initial_point.pose.orientation.x, _x.initial_point.pose.orientation.y, _x.initial_point.pose.orientation.z, _x.initial_point.pose.orientation.w, _x.initial_point.wrench_or_stiffness.force.x, _x.initial_point.wrench_or_stiffness.force.y, _x.initial_point.wrench_or_stiffness.force.z, _x.initial_point.wrench_or_stiffness.torque.x, _x.initial_point.wrench_or_stiffness.torque.y, _x.initial_point.wrench_or_stiffness.torque.z, _x.initial_point.isForceX, _x.initial_point.isForceY, _x.initial_point.isForceZ, _x.initial_point.isTorqueX, _x.initial_point.isTorqueY, _x.initial_point.isTorqueZ, _x.initial_point.time_from_start.secs, _x.initial_point.time_from_start.nsecs, _x.desired.header.seq, _x.desired.header.stamp.secs, _x.desired.header.stamp.nsecs))
      _x = self.desired.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i3I.pack(_x.desired.pose.position.x, _x.desired.pose.position.y, _x.desired.pose.position.z, _x.desired.pose.orientation.x, _x.desired.pose.orientation.y, _x.desired.pose.orientation.z, _x.desired.pose.orientation.w, _x.desired.wrench_or_stiffness.force.x, _x.desired.wrench_or_stiffness.force.y, _x.desired.wrench_or_stiffness.force.z, _x.desired.wrench_or_stiffness.torque.x, _x.desired.wrench_or_stiffness.torque.y, _x.desired.wrench_or_stiffness.torque.z, _x.desired.isForceX, _x.desired.isForceY, _x.desired.isForceZ, _x.desired.isTorqueX, _x.desired.isTorqueY, _x.desired.isTorqueZ, _x.desired.time_from_start.secs, _x.desired.time_from_start.nsecs, _x.actual_pose.header.seq, _x.actual_pose.header.stamp.secs, _x.actual_pose.header.stamp.nsecs))
      _x = self.actual_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2id.pack(_x.actual_pose.pose.position.x, _x.actual_pose.pose.position.y, _x.actual_pose.pose.position.z, _x.actual_pose.pose.orientation.x, _x.actual_pose.pose.orientation.y, _x.actual_pose.pose.orientation.z, _x.actual_pose.pose.orientation.w, _x.actual_pose.wrench_or_stiffness.force.x, _x.actual_pose.wrench_or_stiffness.force.y, _x.actual_pose.wrench_or_stiffness.force.z, _x.actual_pose.wrench_or_stiffness.torque.x, _x.actual_pose.wrench_or_stiffness.torque.y, _x.actual_pose.wrench_or_stiffness.torque.z, _x.actual_pose.isForceX, _x.actual_pose.isForceY, _x.actual_pose.isForceZ, _x.actual_pose.isTorqueX, _x.actual_pose.isTorqueY, _x.actual_pose.isTorqueZ, _x.actual_pose.time_from_start.secs, _x.actual_pose.time_from_start.nsecs, _x.effort_sq_error))
      length = len(self.requested_joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.requested_joint_efforts))
      length = len(self.actual_joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.actual_joint_efforts))
      _x = self
      buff.write(_struct_2i.pack(_x.running_time.secs, _x.running_time.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = None
      if self.initial_point is None:
        self.initial_point = ee_cart_imped_msgs.msg.StiffPoint()
      if self.desired is None:
        self.desired = ee_cart_imped_msgs.msg.StiffPoint()
      if self.actual_pose is None:
        self.actual_pose = ee_cart_imped_msgs.msg.StiffPoint()
      if self.running_time is None:
        self.running_time = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal = []
      for i in range(0, length):
        val1 = ee_cart_imped_msgs.msg.StiffPoint()
        _v10 = val1.header
        start = end
        end += 4
        (_v10.seq,) = _struct_I.unpack(str[start:end])
        _v11 = _v10.stamp
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.frame_id = str[start:end].decode('utf-8')
        else:
          _v10.frame_id = str[start:end]
        _v12 = val1.pose
        _v13 = _v12.position
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v14 = _v12.orientation
        _x = _v14
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v15 = val1.wrench_or_stiffness
        _v16 = _v15.force
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v17 = _v15.torque
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ,) = _struct_6B.unpack(str[start:end])
        val1.isForceX = bool(val1.isForceX)
        val1.isForceY = bool(val1.isForceY)
        val1.isForceZ = bool(val1.isForceZ)
        val1.isTorqueX = bool(val1.isTorqueX)
        val1.isTorqueY = bool(val1.isTorqueY)
        val1.isTorqueZ = bool(val1.isTorqueZ)
        _v18 = val1.time_from_start
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.goal.append(val1)
      _x = self
      start = end
      end += 12
      (_x.initial_point.header.seq, _x.initial_point.header.stamp.secs, _x.initial_point.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.initial_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.initial_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.initial_point.pose.position.x, _x.initial_point.pose.position.y, _x.initial_point.pose.position.z, _x.initial_point.pose.orientation.x, _x.initial_point.pose.orientation.y, _x.initial_point.pose.orientation.z, _x.initial_point.pose.orientation.w, _x.initial_point.wrench_or_stiffness.force.x, _x.initial_point.wrench_or_stiffness.force.y, _x.initial_point.wrench_or_stiffness.force.z, _x.initial_point.wrench_or_stiffness.torque.x, _x.initial_point.wrench_or_stiffness.torque.y, _x.initial_point.wrench_or_stiffness.torque.z, _x.initial_point.isForceX, _x.initial_point.isForceY, _x.initial_point.isForceZ, _x.initial_point.isTorqueX, _x.initial_point.isTorqueY, _x.initial_point.isTorqueZ, _x.initial_point.time_from_start.secs, _x.initial_point.time_from_start.nsecs, _x.desired.header.seq, _x.desired.header.stamp.secs, _x.desired.header.stamp.nsecs,) = _struct_13d6B2i3I.unpack(str[start:end])
      self.initial_point.isForceX = bool(self.initial_point.isForceX)
      self.initial_point.isForceY = bool(self.initial_point.isForceY)
      self.initial_point.isForceZ = bool(self.initial_point.isForceZ)
      self.initial_point.isTorqueX = bool(self.initial_point.isTorqueX)
      self.initial_point.isTorqueY = bool(self.initial_point.isTorqueY)
      self.initial_point.isTorqueZ = bool(self.initial_point.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.desired.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.desired.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.desired.pose.position.x, _x.desired.pose.position.y, _x.desired.pose.position.z, _x.desired.pose.orientation.x, _x.desired.pose.orientation.y, _x.desired.pose.orientation.z, _x.desired.pose.orientation.w, _x.desired.wrench_or_stiffness.force.x, _x.desired.wrench_or_stiffness.force.y, _x.desired.wrench_or_stiffness.force.z, _x.desired.wrench_or_stiffness.torque.x, _x.desired.wrench_or_stiffness.torque.y, _x.desired.wrench_or_stiffness.torque.z, _x.desired.isForceX, _x.desired.isForceY, _x.desired.isForceZ, _x.desired.isTorqueX, _x.desired.isTorqueY, _x.desired.isTorqueZ, _x.desired.time_from_start.secs, _x.desired.time_from_start.nsecs, _x.actual_pose.header.seq, _x.actual_pose.header.stamp.secs, _x.actual_pose.header.stamp.nsecs,) = _struct_13d6B2i3I.unpack(str[start:end])
      self.desired.isForceX = bool(self.desired.isForceX)
      self.desired.isForceY = bool(self.desired.isForceY)
      self.desired.isForceZ = bool(self.desired.isForceZ)
      self.desired.isTorqueX = bool(self.desired.isTorqueX)
      self.desired.isTorqueY = bool(self.desired.isTorqueY)
      self.desired.isTorqueZ = bool(self.desired.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actual_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.actual_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 126
      (_x.actual_pose.pose.position.x, _x.actual_pose.pose.position.y, _x.actual_pose.pose.position.z, _x.actual_pose.pose.orientation.x, _x.actual_pose.pose.orientation.y, _x.actual_pose.pose.orientation.z, _x.actual_pose.pose.orientation.w, _x.actual_pose.wrench_or_stiffness.force.x, _x.actual_pose.wrench_or_stiffness.force.y, _x.actual_pose.wrench_or_stiffness.force.z, _x.actual_pose.wrench_or_stiffness.torque.x, _x.actual_pose.wrench_or_stiffness.torque.y, _x.actual_pose.wrench_or_stiffness.torque.z, _x.actual_pose.isForceX, _x.actual_pose.isForceY, _x.actual_pose.isForceZ, _x.actual_pose.isTorqueX, _x.actual_pose.isTorqueY, _x.actual_pose.isTorqueZ, _x.actual_pose.time_from_start.secs, _x.actual_pose.time_from_start.nsecs, _x.effort_sq_error,) = _struct_13d6B2id.unpack(str[start:end])
      self.actual_pose.isForceX = bool(self.actual_pose.isForceX)
      self.actual_pose.isForceY = bool(self.actual_pose.isForceY)
      self.actual_pose.isForceZ = bool(self.actual_pose.isForceZ)
      self.actual_pose.isTorqueX = bool(self.actual_pose.isTorqueX)
      self.actual_pose.isTorqueY = bool(self.actual_pose.isTorqueY)
      self.actual_pose.isTorqueZ = bool(self.actual_pose.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.requested_joint_efforts = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.actual_joint_efforts = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.running_time.secs, _x.running_time.nsecs,) = _struct_2i.unpack(str[start:end])
      self.running_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal:
        _v19 = val1.header
        buff.write(_struct_I.pack(_v19.seq))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v21 = val1.pose
        _v22 = _v21.position
        _x = _v22
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v23 = _v21.orientation
        _x = _v23
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v24 = val1.wrench_or_stiffness
        _v25 = _v24.force
        _x = _v25
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v26 = _v24.torque
        _x = _v26
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_6B.pack(_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ))
        _v27 = val1.time_from_start
        _x = _v27
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.initial_point.header.seq, _x.initial_point.header.stamp.secs, _x.initial_point.header.stamp.nsecs))
      _x = self.initial_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i3I.pack(_x.initial_point.pose.position.x, _x.initial_point.pose.position.y, _x.initial_point.pose.position.z, _x.initial_point.pose.orientation.x, _x.initial_point.pose.orientation.y, _x.initial_point.pose.orientation.z, _x.initial_point.pose.orientation.w, _x.initial_point.wrench_or_stiffness.force.x, _x.initial_point.wrench_or_stiffness.force.y, _x.initial_point.wrench_or_stiffness.force.z, _x.initial_point.wrench_or_stiffness.torque.x, _x.initial_point.wrench_or_stiffness.torque.y, _x.initial_point.wrench_or_stiffness.torque.z, _x.initial_point.isForceX, _x.initial_point.isForceY, _x.initial_point.isForceZ, _x.initial_point.isTorqueX, _x.initial_point.isTorqueY, _x.initial_point.isTorqueZ, _x.initial_point.time_from_start.secs, _x.initial_point.time_from_start.nsecs, _x.desired.header.seq, _x.desired.header.stamp.secs, _x.desired.header.stamp.nsecs))
      _x = self.desired.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2i3I.pack(_x.desired.pose.position.x, _x.desired.pose.position.y, _x.desired.pose.position.z, _x.desired.pose.orientation.x, _x.desired.pose.orientation.y, _x.desired.pose.orientation.z, _x.desired.pose.orientation.w, _x.desired.wrench_or_stiffness.force.x, _x.desired.wrench_or_stiffness.force.y, _x.desired.wrench_or_stiffness.force.z, _x.desired.wrench_or_stiffness.torque.x, _x.desired.wrench_or_stiffness.torque.y, _x.desired.wrench_or_stiffness.torque.z, _x.desired.isForceX, _x.desired.isForceY, _x.desired.isForceZ, _x.desired.isTorqueX, _x.desired.isTorqueY, _x.desired.isTorqueZ, _x.desired.time_from_start.secs, _x.desired.time_from_start.nsecs, _x.actual_pose.header.seq, _x.actual_pose.header.stamp.secs, _x.actual_pose.header.stamp.nsecs))
      _x = self.actual_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d6B2id.pack(_x.actual_pose.pose.position.x, _x.actual_pose.pose.position.y, _x.actual_pose.pose.position.z, _x.actual_pose.pose.orientation.x, _x.actual_pose.pose.orientation.y, _x.actual_pose.pose.orientation.z, _x.actual_pose.pose.orientation.w, _x.actual_pose.wrench_or_stiffness.force.x, _x.actual_pose.wrench_or_stiffness.force.y, _x.actual_pose.wrench_or_stiffness.force.z, _x.actual_pose.wrench_or_stiffness.torque.x, _x.actual_pose.wrench_or_stiffness.torque.y, _x.actual_pose.wrench_or_stiffness.torque.z, _x.actual_pose.isForceX, _x.actual_pose.isForceY, _x.actual_pose.isForceZ, _x.actual_pose.isTorqueX, _x.actual_pose.isTorqueY, _x.actual_pose.isTorqueZ, _x.actual_pose.time_from_start.secs, _x.actual_pose.time_from_start.nsecs, _x.effort_sq_error))
      length = len(self.requested_joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.requested_joint_efforts.tostring())
      length = len(self.actual_joint_efforts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.actual_joint_efforts.tostring())
      _x = self
      buff.write(_struct_2i.pack(_x.running_time.secs, _x.running_time.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = None
      if self.initial_point is None:
        self.initial_point = ee_cart_imped_msgs.msg.StiffPoint()
      if self.desired is None:
        self.desired = ee_cart_imped_msgs.msg.StiffPoint()
      if self.actual_pose is None:
        self.actual_pose = ee_cart_imped_msgs.msg.StiffPoint()
      if self.running_time is None:
        self.running_time = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal = []
      for i in range(0, length):
        val1 = ee_cart_imped_msgs.msg.StiffPoint()
        _v28 = val1.header
        start = end
        end += 4
        (_v28.seq,) = _struct_I.unpack(str[start:end])
        _v29 = _v28.stamp
        _x = _v29
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.frame_id = str[start:end].decode('utf-8')
        else:
          _v28.frame_id = str[start:end]
        _v30 = val1.pose
        _v31 = _v30.position
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v32 = _v30.orientation
        _x = _v32
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v33 = val1.wrench_or_stiffness
        _v34 = _v33.force
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v35 = _v33.torque
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.isForceX, _x.isForceY, _x.isForceZ, _x.isTorqueX, _x.isTorqueY, _x.isTorqueZ,) = _struct_6B.unpack(str[start:end])
        val1.isForceX = bool(val1.isForceX)
        val1.isForceY = bool(val1.isForceY)
        val1.isForceZ = bool(val1.isForceZ)
        val1.isTorqueX = bool(val1.isTorqueX)
        val1.isTorqueY = bool(val1.isTorqueY)
        val1.isTorqueZ = bool(val1.isTorqueZ)
        _v36 = val1.time_from_start
        _x = _v36
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.goal.append(val1)
      _x = self
      start = end
      end += 12
      (_x.initial_point.header.seq, _x.initial_point.header.stamp.secs, _x.initial_point.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.initial_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.initial_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.initial_point.pose.position.x, _x.initial_point.pose.position.y, _x.initial_point.pose.position.z, _x.initial_point.pose.orientation.x, _x.initial_point.pose.orientation.y, _x.initial_point.pose.orientation.z, _x.initial_point.pose.orientation.w, _x.initial_point.wrench_or_stiffness.force.x, _x.initial_point.wrench_or_stiffness.force.y, _x.initial_point.wrench_or_stiffness.force.z, _x.initial_point.wrench_or_stiffness.torque.x, _x.initial_point.wrench_or_stiffness.torque.y, _x.initial_point.wrench_or_stiffness.torque.z, _x.initial_point.isForceX, _x.initial_point.isForceY, _x.initial_point.isForceZ, _x.initial_point.isTorqueX, _x.initial_point.isTorqueY, _x.initial_point.isTorqueZ, _x.initial_point.time_from_start.secs, _x.initial_point.time_from_start.nsecs, _x.desired.header.seq, _x.desired.header.stamp.secs, _x.desired.header.stamp.nsecs,) = _struct_13d6B2i3I.unpack(str[start:end])
      self.initial_point.isForceX = bool(self.initial_point.isForceX)
      self.initial_point.isForceY = bool(self.initial_point.isForceY)
      self.initial_point.isForceZ = bool(self.initial_point.isForceZ)
      self.initial_point.isTorqueX = bool(self.initial_point.isTorqueX)
      self.initial_point.isTorqueY = bool(self.initial_point.isTorqueY)
      self.initial_point.isTorqueZ = bool(self.initial_point.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.desired.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.desired.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 130
      (_x.desired.pose.position.x, _x.desired.pose.position.y, _x.desired.pose.position.z, _x.desired.pose.orientation.x, _x.desired.pose.orientation.y, _x.desired.pose.orientation.z, _x.desired.pose.orientation.w, _x.desired.wrench_or_stiffness.force.x, _x.desired.wrench_or_stiffness.force.y, _x.desired.wrench_or_stiffness.force.z, _x.desired.wrench_or_stiffness.torque.x, _x.desired.wrench_or_stiffness.torque.y, _x.desired.wrench_or_stiffness.torque.z, _x.desired.isForceX, _x.desired.isForceY, _x.desired.isForceZ, _x.desired.isTorqueX, _x.desired.isTorqueY, _x.desired.isTorqueZ, _x.desired.time_from_start.secs, _x.desired.time_from_start.nsecs, _x.actual_pose.header.seq, _x.actual_pose.header.stamp.secs, _x.actual_pose.header.stamp.nsecs,) = _struct_13d6B2i3I.unpack(str[start:end])
      self.desired.isForceX = bool(self.desired.isForceX)
      self.desired.isForceY = bool(self.desired.isForceY)
      self.desired.isForceZ = bool(self.desired.isForceZ)
      self.desired.isTorqueX = bool(self.desired.isTorqueX)
      self.desired.isTorqueY = bool(self.desired.isTorqueY)
      self.desired.isTorqueZ = bool(self.desired.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actual_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.actual_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 126
      (_x.actual_pose.pose.position.x, _x.actual_pose.pose.position.y, _x.actual_pose.pose.position.z, _x.actual_pose.pose.orientation.x, _x.actual_pose.pose.orientation.y, _x.actual_pose.pose.orientation.z, _x.actual_pose.pose.orientation.w, _x.actual_pose.wrench_or_stiffness.force.x, _x.actual_pose.wrench_or_stiffness.force.y, _x.actual_pose.wrench_or_stiffness.force.z, _x.actual_pose.wrench_or_stiffness.torque.x, _x.actual_pose.wrench_or_stiffness.torque.y, _x.actual_pose.wrench_or_stiffness.torque.z, _x.actual_pose.isForceX, _x.actual_pose.isForceY, _x.actual_pose.isForceZ, _x.actual_pose.isTorqueX, _x.actual_pose.isTorqueY, _x.actual_pose.isTorqueZ, _x.actual_pose.time_from_start.secs, _x.actual_pose.time_from_start.nsecs, _x.effort_sq_error,) = _struct_13d6B2id.unpack(str[start:end])
      self.actual_pose.isForceX = bool(self.actual_pose.isForceX)
      self.actual_pose.isForceY = bool(self.actual_pose.isForceY)
      self.actual_pose.isForceZ = bool(self.actual_pose.isForceZ)
      self.actual_pose.isTorqueX = bool(self.actual_pose.isTorqueX)
      self.actual_pose.isTorqueY = bool(self.actual_pose.isTorqueY)
      self.actual_pose.isTorqueZ = bool(self.actual_pose.isTorqueZ)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.requested_joint_efforts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.actual_joint_efforts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.running_time.secs, _x.running_time.nsecs,) = _struct_2i.unpack(str[start:end])
      self.running_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6B = struct.Struct("<6B")
_struct_13d6B2id = struct.Struct("<13d6B2id")
_struct_2i = struct.Struct("<2i")
_struct_3I = struct.Struct("<3I")
_struct_13d6B2i3I = struct.Struct("<13d6B2i3I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
