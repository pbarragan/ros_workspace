#include <ros/ros.h>
#include <actionlib/client/simple_action_client.h>

#include <arm_navigation_msgs/MoveArmAction.h>
#include <arm_navigation_msgs/utils.h>
#include <sensor_msgs/JointState.h>
#include <actuate_mechanism/actuate_mechanism.hh>
#include <ee_force/eeForceMsg.h>

ActuateMechanism::ActuateMechanism() :
  move_arm_("move_left_arm", true) {
  //move_arm_ = new actionlib::SimpleActionClient<arm_navigation_msgs::MoveArmAction>("move_left_arm",true);

  move_arm_.waitForServer();
  ROS_INFO("Connected to server");
  
  

  desired_pose_.header.frame_id = "torso_lift_link";
  desired_pose_.link_name = "l_wrist_roll_link";

  desired_pose_.absolute_position_tolerance.x = 0.02;
  desired_pose_.absolute_position_tolerance.y = 0.02;
  desired_pose_.absolute_position_tolerance.z = 0.02;

  desired_pose_.absolute_roll_tolerance = 0.04;
  desired_pose_.absolute_pitch_tolerance = 0.04;
  desired_pose_.absolute_yaw_tolerance = 0.04;

}

ActuateMechanism::~ActuateMechanism(){
}

void ActuateMechanism::move_arm_to_pose(double x_position){
  arm_navigation_msgs::MoveArmGoal goalA_;

  goalA_.motion_plan_request.group_name = "left_arm";
  goalA_.motion_plan_request.num_planning_attempts = 10;
  goalA_.motion_plan_request.planner_id = std::string("");
  goalA_.planner_service_name = std::string("ompl_planning/plan_kinematic_path");
  goalA_.motion_plan_request.allowed_planning_time = ros::Duration(5.0);

  desired_pose_.pose.position.x = x_position;
  desired_pose_.pose.position.y = 0.10;
  desired_pose_.pose.position.z = 0;

  desired_pose_.pose.orientation.x = 0.0;
  desired_pose_.pose.orientation.y = 0.0;
  desired_pose_.pose.orientation.z = 0.0;
  desired_pose_.pose.orientation.w = 1.0;

  arm_navigation_msgs::addGoalConstraintToMoveArmGoal(desired_pose_,goalA_);

  if (nh.ok())
    {
      bool finished_within_time = false;
      move_arm_.sendGoal(goalA_);
      finished_within_time = move_arm_.waitForResult(ros::Duration(200.0));
      if (!finished_within_time)
	{
	  move_arm_.cancelGoal();
	  ROS_INFO("Timed out achieving goal A");
	}
      else
	{
	  actionlib::SimpleClientGoalState state = move_arm_.getState();
	  bool success = (state == actionlib::SimpleClientGoalState::SUCCEEDED);
	  if(success)
	    ROS_INFO("Action finished: %s",state.toString().c_str());
	  else
	    ROS_INFO("Action failed: %s",state.toString().c_str());
	}
    }
  
}

void ActuateMechanism::ee_force_callback(ee_force::eeForceMsg msg){
  ROS_INFO("Got ee_force msg\n");
  double xForce = msg.data[0];

  if (xForce > 10){
    ROS_INFO("I found something!\n");
  }
  else

}


int main(int argc, char **argv){
  ros::init (argc, argv, "move_arm_pose_goal_test");
  ros::NodeHandle node;
  //actionlib::SimpleActionClient<arm_navigation_msgs::MoveArmAction> move_arm("move_left_arm",true);

  ActuateMechanism actMech;
  actMech.x_position_ = 0.50;

  //subscribers
  ros::Subscriber sub_ee_force = node.subscribe("/ee_force", 1, &ActuateMechanism::ee_force_callback, &actMech);

  actMech.move_arm_to_pose(x_position);
  x_position = 0.65;
  actMech.move_arm_to_pose(x_position);
  actMech.move_arm_.cancelAllGoals();

  ros::spin();

  return 0;
}
