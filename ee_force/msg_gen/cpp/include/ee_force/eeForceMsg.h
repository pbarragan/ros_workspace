/* Auto-generated by genmsg_cpp for file /home/barragan/pr2_repo/ros_workspace/ee_force/msg/eeForceMsg.msg */
#ifndef EE_FORCE_MESSAGE_EEFORCEMSG_H
#define EE_FORCE_MESSAGE_EEFORCEMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ee_force
{
template <class ContainerAllocator>
struct eeForceMsg_ {
  typedef eeForceMsg_<ContainerAllocator> Type;

  eeForceMsg_()
  : data()
  , jointAngles()
  {
  }

  eeForceMsg_(const ContainerAllocator& _alloc)
  : data(_alloc)
  , jointAngles(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _data_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  data;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _jointAngles_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  jointAngles;


  typedef boost::shared_ptr< ::ee_force::eeForceMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ee_force::eeForceMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct eeForceMsg
typedef  ::ee_force::eeForceMsg_<std::allocator<void> > eeForceMsg;

typedef boost::shared_ptr< ::ee_force::eeForceMsg> eeForceMsgPtr;
typedef boost::shared_ptr< ::ee_force::eeForceMsg const> eeForceMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ee_force::eeForceMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ee_force::eeForceMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ee_force

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ee_force::eeForceMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ee_force::eeForceMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ee_force::eeForceMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "de54ba17451137cbb1bc233fa1cbaeed";
  }

  static const char* value(const  ::ee_force::eeForceMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xde54ba17451137cbULL;
  static const uint64_t static_value2 = 0xb1bc233fa1cbaeedULL;
};

template<class ContainerAllocator>
struct DataType< ::ee_force::eeForceMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ee_force/eeForceMsg";
  }

  static const char* value(const  ::ee_force::eeForceMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ee_force::eeForceMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] data\n\
float64[] jointAngles\n\
";
  }

  static const char* value(const  ::ee_force::eeForceMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ee_force::eeForceMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
    stream.next(m.jointAngles);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct eeForceMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ee_force::eeForceMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ee_force::eeForceMsg_<ContainerAllocator> & v) 
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "jointAngles[]" << std::endl;
    for (size_t i = 0; i < v.jointAngles.size(); ++i)
    {
      s << indent << "  jointAngles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.jointAngles[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // EE_FORCE_MESSAGE_EEFORCEMSG_H

